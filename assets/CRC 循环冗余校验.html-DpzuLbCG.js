import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as t,o as n}from"./app-BMPm3d_6.js";const p="/Blog/assets/image-20241102162304013-BcaMxPkc.png",m={};function i(l,s){return n(),e("div",null,s[0]||(s[0]=[t('<h1 id="crc-循环冗余校验" tabindex="-1"><a class="header-anchor" href="#crc-循环冗余校验"><span>CRC 循环冗余校验</span></a></h1><h2 id="能干什么" tabindex="-1"><a class="header-anchor" href="#能干什么"><span>能干什么</span></a></h2><p>可以检错多位数据，但是不能纠错</p><h2 id="例题" tabindex="-1"><a class="header-anchor" href="#例题"><span>例题</span></a></h2><p>假设发送信息码 <code>110010</code>，生成多项式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">g(x)=x^3+x^2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ，根据多项式最高次幂数，在信息码后面补充对应个数的0，信息码补后为 <code>110010000</code> 。多项式的对应位（x<sup>0</sup> , x<sup>1</sup> , x<sup>2</sup> 以此类推）存在即表示为1，不存在即表示为0，得出CRC校验码为 <code>1101</code>，将信息码与校验码进行异或运算：</p><figure><img src="'+p+'" alt="根式除法" tabindex="0" loading="lazy"><figcaption>根式除法</figcaption></figure><p>因此，最终结果为 <code>110010 100</code></p>',7)]))}const c=a(m,[["render",i],["__file","CRC 循环冗余校验.html.vue"]]),h=JSON.parse('{"path":"/notes/web/knowledge_points/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/CRC%20%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C.html","title":"CRC 循环冗余校验","lang":"zh-CN","frontmatter":{"order":4,"description":"CRC 循环冗余校验 能干什么 可以检错多位数据，但是不能纠错 例题 假设发送信息码 110010，生成多项式 g(x)=x3+x2+1 ，根据多项式最高次幂数，在信息码后面补充对应个数的0，信息码补后为 110010000 。多项式的对应位（x0 , x1 , x2 以此类推）存在即表示为1，不存在即表示为0，得出CRC校验码为 1101，将信息码与...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Blog/notes/web/knowledge_points/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/CRC%20%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C.html"}],["meta",{"property":"og:site_name","content":"A.M. Blog"}],["meta",{"property":"og:title","content":"CRC 循环冗余校验"}],["meta",{"property":"og:description","content":"CRC 循环冗余校验 能干什么 可以检错多位数据，但是不能纠错 例题 假设发送信息码 110010，生成多项式 g(x)=x3+x2+1 ，根据多项式最高次幂数，在信息码后面补充对应个数的0，信息码补后为 110010000 。多项式的对应位（x0 , x1 , x2 以此类推）存在即表示为1，不存在即表示为0，得出CRC校验码为 1101，将信息码与..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-08T13:51:43.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-08T13:51:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CRC 循环冗余校验\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-08T13:51:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Arrow Magician\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"能干什么","slug":"能干什么","link":"#能干什么","children":[]},{"level":2,"title":"例题","slug":"例题","link":"#例题","children":[]}],"git":{"createdTime":1731073903000,"updatedTime":1731073903000,"contributors":[{"name":"Arrow-Magician","email":"315903697@qq.com","commits":1}]},"readingTime":{"minutes":0.5,"words":149},"filePathRelative":"notes/web/knowledge_points/数据通信基础/CRC 循环冗余校验.md","localizedDate":"2024年11月8日","autoDesc":true}');export{c as comp,h as data};
