import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c,d as s,f as n,a as i,e as a}from"./app-feNfOZXn.js";const l="/Blog/assets/1676634058291-hsj8mrho.png",u={},r=a('<h1 id="作业-1" tabindex="-1"><a class="header-anchor" href="#作业-1" aria-hidden="true">#</a> 作业 - 1</h1><h2 id="客观题" tabindex="-1"><a class="header-anchor" href="#客观题" aria-hidden="true">#</a> 客观题</h2><ol><li><strong>下列关于作用域说法错误的是？(D)</strong></li></ol><p>A： JavaScript作用域可以分为全局作用域和局部作用域</p><p>B： 全局作用域声明的变量可以给局部作用域使用</p><p>C： 局部作用域可以分为函数作用域和块级作用域</p><p>D： 局部作用域声明的变量可以给其他局部作用域使用</p><p><strong>解析：</strong> 局部作用域声明的变量只能在函数内部使用。</p><ol start="2"><li><strong>下列关于作用域链说法错误的是？(C)</strong></li></ol><p>A： 作用域链本质上是底层的变量查找机制</p><p>B： 在函数被执行时，会优先查找当前函数作用域中查找变量</p><p>C： 如果当前作用域查找不到则会优先从全局作用域查找，按照从外到内的顺序查找</p><p>D： 子作用域能够访问父作用域，父级作用域无法访问子级作用域</p><p><strong>解析：</strong> 应该按照从内到外的顺序，逐级查找父级作用域直到全局作用域</p><ol start="3"><li><strong>下列关于垃圾回收机制说法正确的是？(ABCD) 多选</strong></li></ol><p>A： 全局变量一般不会回收，通常在关闭页面回收全局变量</p><p>B： 一般情况下局部变量的值, 不用了, 会被自动回收掉</p><p>C： 不再用到的内存，没有及时释放，就叫做内存泄漏</p><p>D： 常见的浏览器垃圾回收算法: 引用计数法和 标记清除法</p><ol start="4"><li><strong>下列闭包说法错误的是？(A)</strong></li></ol><p>A： 闭包使用也是一个巧妙的用法，不存在内存泄漏的问题</p><p>B： 简单理解：闭包 = 内层函数 + 外层函数的变量</p><p>C： 闭包使用的时候，内部的变量因为被外部引用了，所以代码执行完毕不会释放内存</p><p>D： 闭包可以封闭数据，实现数据私有，外部也可以访问函数内部的变量</p>',24),d=s("strong",null,"解析：",-1),k={href:"https://blog.csdn.net/h18377528386/article/details/126712640",target:"_blank",rel:"noopener noreferrer"},v=a(`<ol start="5"><li><strong>下列关于剩余参数说法错误的是？(C)</strong></li></ol><p>A： 剩余参数允许我们将一个不定数量的参数表示为一个数组</p><p>B： 剩余参数是个真数组，具备pop、push等方法</p><p>C： 剩余参数和arguments动态参数是一样的，但是写法更简单</p><p>D： 开发中提倡使用剩余参数想必也是极好的</p><p><strong>解析：</strong> 似乎也没有存在哪种方式更简单，只不过剩余参数返回的真数组，动态参数返回的是伪数组，两者相比取其优。</p><ol start="6"><li><strong>下列关于箭头函数说法正确的是？(ABC) 多选</strong></li></ol><p>A： 箭头函数更适用于那些本来需要匿名函数的地方</p><p>B： 箭头函数没有 arguments 动态参数，但是有 剩余参数</p><p>C： 箭头函数不会创建自己的this,它只会从自己的作用域链的上一层沿用this</p><p>D： 以后开发中，我们使用简便的箭头函数了，函数可以一律改为箭头函数</p><p><strong>解析：</strong> 倒也不能一律，有一些函数比如事件函数，如果需要用到 <code>this</code> 的话还是得用传统的函数。</p><ol start="7"><li><strong>下列关于箭头函数写法正确的是?(ABC)多选</strong></li></ol><p>A： const fn = x =&gt; x + x 只有一个参数可以省略小括号</p><p>B： const fn = x =&gt; x + x 只有一行代码，可以省略大括号，而且还可以省略return</p><p>C： const fn = x =&gt; ({uname}) 箭头函数还可以返回对象，但是必须用小括号包含</p><p>D： const fn = x，y =&gt; x + y 平时省略小括号更简单</p><p><strong>解析：</strong> 多个参数就需要用括号了。更改为 <code>const fn = (x, y) =&gt; x + y</code></p><ol start="8"><li><strong>下列关于数组解构说法错误的是?(B)</strong></li></ol><p>A： 数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法</p><p>B： [a,b] = [1,2,3] 这样写返回的结果是 a = 2 b = 3</p><p>C： [a,b] = [[1,2], 3] 返回的结果是: a = [1,2] b = 3</p><p>D： 还是建议尽量数组单元值和变量匹配</p><p><strong>解析：</strong> 数组解构是按顺序返回结果的，因此 <code>[a, b] = [1, 2, 3]</code> 返回的结果是 <code>a = 1, b = 2</code></p><ol start="9"><li><strong>有如下代码，下列关于对象解构说法正确的是?(B)</strong></li></ol><p>A： {uname, age} 可以得到 pink老师 和 18</p><p>B：[{uname}] 可以得到pink老师</p><p>C： {age} 可以得到 18</p><p>D： [uname, age ] 可以得到 pink老师 和 18</p><ol start="10"><li><strong>下面关于数组方法说法错误的是? (A)</strong></li></ol><p>A： forEach 方法可以遍历数组，并且返回一个新的数组，不修改原数组</p><p>B：map 方法可以迭代数组，主要用于数据处理，并且返回一个新的数组，不修改原数组</p><p>C：filter方法可以筛选数组，主要用于筛选符合条件数据，并且返回一个新的数组，不修改原数组</p><p>D：join 方法可以把数组元素根据小括号的参数，拼接为一个字符串</p><p><strong>解析：</strong> forEach 方法并不会返回一个新数组</p><h2 id="排错题" tabindex="-1"><a class="header-anchor" href="#排错题" aria-hidden="true">#</a> 排错题</h2><h3 id="_1-全局作用域-局部作用域" tabindex="-1"><a class="header-anchor" href="#_1-全局作用域-局部作用域" aria-hidden="true">#</a> 1. 全局作用域 - 局部作用域</h3><p>下面第5行 与 第8行会报错吗，如果会，怎么改？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>count</code> 只是 <code>getSum()</code> 函数内部定义，在函数外部是不可见的，所以就会报错，表示 <code>coutn</code> 没有定义。</p><p>修改如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">10</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
  <span class="token keyword">return</span> count
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-作用域链" tabindex="-1"><a class="header-anchor" href="#_2-作用域链" aria-hidden="true">#</a> 2. 作用域链</h3><p>找出下面12行的打印 a=10 是否有问题，如果有问题说出原因</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>fn1()</code> 会什么都打印补出来，因为函数内部既没有返回值，也没有打印输出的按钮；</li><li><code>fn1()</code> 不会打印出10，因为作用域链的原因，<code>a</code> 已经重新被赋值200</li></ol><h3 id="_3-闭包" tabindex="-1"><a class="header-anchor" href="#_3-闭包" aria-hidden="true">#</a> 3. 闭包</h3><p>15行打印count = 2 是否正确，如果错误，请说出正确答案</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token operator">++</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> g
<span class="token punctuation">}</span>

<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// count = 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不正确，15行打印出来应该是5，因为调用了4次，依次从上往下输出2，3，4，5</p><h3 id="_4-箭头函数" tabindex="-1"><a class="header-anchor" href="#_4-箭头函数" aria-hidden="true">#</a> 4. 箭头函数</h3><p>请说出一下代码是否错误，如果有错如何改正，才能返回一个对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> x<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有错误，应该修改为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> x<span class="token punctuation">;</span> age<span class="token operator">:</span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-解构赋值" tabindex="-1"><a class="header-anchor" href="#_5-解构赋值" aria-hidden="true">#</a> 5. 解构赋值</h3><p>以下代码是否会正常执行，如果不会，如何改正</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>min<span class="token punctuation">,</span> avg<span class="token punctuation">,</span> max<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">]</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要加 <code>;</code> ，修改如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>min<span class="token punctuation">,</span> avg<span class="token punctuation">,</span> max<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="主观题" tabindex="-1"><a class="header-anchor" href="#主观题" aria-hidden="true">#</a> 主观题</h2><p><img src="`+l+`" alt="67663405829" loading="lazy"></p><h3 id="代码编写" tabindex="-1"><a class="header-anchor" href="#代码编写" aria-hidden="true">#</a> 代码编写</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 1. 渲染函数</span>
  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> icon<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> item
      str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;li &gt;
&lt;a href=&quot;#&quot; target=&quot;_blank&quot;&gt;&lt;img src=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> width=&quot;91&quot; height=&quot;91&quot; alt=&quot;曜&quot; /&gt;曜&lt;/a&gt;
  &lt;/li&gt;
</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.herolist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span>heroArr<span class="token punctuation">)</span>

  <span class="token comment">// 2. 点击筛选按钮</span>
  <span class="token keyword">const</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.types-ms&gt;li&#39;</span><span class="token punctuation">)</span>
  lis<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;li.current&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;current&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;current&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">let</span> arr <span class="token operator">=</span> heroArr
      <span class="token comment">// console.log(this.dataset.ptype);</span>
      arr <span class="token operator">=</span> heroArr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">ele</span> <span class="token operator">=&gt;</span> ele<span class="token punctuation">.</span>pay_type <span class="token operator">===</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>ptype <span class="token operator">||</span> ele<span class="token punctuation">.</span>pay_type <span class="token operator">===</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
      <span class="token function">render</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,64);function m(g,b){const t=e("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[d,n(" 闭包还是会存在内存泄漏的问题的，如果闭包函数存在返回值且使用全局变量对闭包函数的返回值进行存储，就有可能造成内存泄漏。具体可看"),s("a",k,[n("这里"),i(t)]),n("。")]),v])}const y=p(u,[["render",m],["__file","作业 - 1.html.vue"]]);export{y as default};
